apiVersion: v1
kind: ConfigMap
metadata:
  name: deployer
data:
  functions.sh: |-
    #!/bin/bash

    function parse_bool {
      local v=${1,,}
      if [ "$v" != true -a "$v" != false ]; then
        printf >&2 'Invalid boolean value for %s: %s\n' "$2" "$1"
        return 1
      fi
      echo "$v"
    }

    # $1: name (eg [hawkular-metrics|hawkular-cassandra])
    # $2: hostnames to use
    # $3: environment variable containing base64 pem
    function setup_certificate {
      local name="${1:-}"
      local hostnames="${2:-}"
      local envVar="${3:-}"

      # Generate certificates used for internal connections
       oc adm ca create-server-cert  \
         --key=$dir/${name}.key \
         --cert=$dir/${name}.crt \
         --hostnames=${hostnames} \
         --signer-cert="$dir/ca.crt" --signer-key="$dir/ca.key" --signer-serial="$dir/ca.serial.txt"
       cat $dir/${name}.key $dir/${name}.crt > $dir/${name}.pem
       cp $dir/ca.crt $dir/${name}-ca.cert
    }

    function handle_previous_deployment() {
      if [ "$mode" = "refresh" ]; then
        echo "Deleting any previous deployment (leaving route and PVCs)"
        # We don't want to delete ourselves, but we do want to remove old deployers
        # Remove our label so that we are not deleted.
        [ -n "${POD_NAME:-}" ] && oc label pod ${POD_NAME} metrics-infra-

        oc delete rc,svc,pod,sa,templates,secrets --selector="metrics-infra" --ignore-not-found=true

        # Add back our label so that the next time the deployer is run this will bedeleted
        [ -n "${POD_NAME:-}" ] && oc label pod ${POD_NAME} metrics-infra=deployer

      elif [ "$redeploy" = true ] || [ "$mode" = remove ]; then
        echo "Deleting any previous deployment"
        # We don't want to delete ourselves, but we do want to remove old deployers
        # Remove our label so that we are not immediately deleted.
        [ -n "${POD_NAME:-}" ] && oc label pod ${POD_NAME} metrics-infra-

        oc delete --grace-period=0 all,sa,templates,secrets --selector="metrics-infra" --ignore-not-found=true
        oc delete pvc --selector="metrics-infra" --ignore-not-found=true

        # Add back our label so that the next time the deployer is run this will bedeleted
        [ -n "${POD_NAME:-}" ] && oc label pod ${POD_NAME} metrics-infra=deployer
      fi
    }


    function create_signer_cert() {
      local dir=$1

      oc adm ca create-signer-cert  \
        --key="${dir}/ca.key" \
        --cert="${dir}/ca.crt" \
        --serial="${dir}/ca.serial.txt" \
        --name="metrics-signer@$(date +%s)"
    }

    function process_san() {
      local host
      local san=$*
      local sans=()
      for value in $san; do
        if [[ $value == "DNS:"* ]]; then
          host=${value:4}
          if [[ ${host: -1} == "," ]]; then
            host=${host:0:${#host} -1}
          fi
          sans=("${sans[@]-}" "$host")
        fi
      done
      echo ${sans[@]}
    }

    function check_san() {
      local san=$1
      local hostname=$2
      #we need to handle the wildcard situation
      if [[ ${san:0:2} == "*." ]]; then
        san=${san:2}
        if [[ $hostname =~ ^.*".${san}"$ ]] || [[ $hostname =~ ^"${san}"$   ]]; then
          echo true
          return
        fi
      else
        if [[ $hostname == ${san} ]]; then
          echo true
          return
        fi
      fi
      echo false
    }
  hawkular-metrics.yaml: >-
    id: hawkular-metrics

    kind: Template

    apiVersion: v1

    name: Hawkular Metrics Template

    description: A template to created a Hawkular Metrics instance.

    metadata:
      name: hawkular-metrics
      labels:
        metrics-infra: hawkular-metrics
    parameters:

    - description: Specify prefix for metrics components; e.g. for
    "openshift/origin-metrics-deployer:v1.1",
        set prefix "openshift/origin-"
      name: IMAGE_PREFIX
      value: openshift/origin-
    - description: Specify version for metrics components; e.g. for
    "openshift/origin-metrics-deployer:v1.1",
        set version "v1.1"
      name: IMAGE_VERSION
      value: "v3.9"
    - description: Specify the number of days that metrics should be stored for.
      name: METRIC_DURATION
      value: '7'
    - description: URL to the Elasticsearch Logging service.
      name: LOGGING_URL
      value: 'https://logging-es.logging.svc.cluster.local:9200'
    - description: Internal URL for the master, for authentication retrieval
      name: MASTER_URL
      value: https://kubernetes.default.svc:443
    - description: If users accounts should be able to write metrics
      name: USER_WRITE_ACCESS
      value: "false"
    - description: How long in seconds we should wait until Hawkular Metrics
    startsup before attempting a restart
      name: STARTUP_TIMEOUT
      value: "500"
    - description: The password to be used for the nodes to communicate with
    each other. Auto generated if empty.
      displayName: JGroups Password
      name: JGROUPS_PASSWORD
      from: '[a-zA-Z0-9]{23}'
      generate: expression
    - description: Path within the container to the file containing the
    CertificateAuthorities to add to the trust store
      name: TRUSTSTORE_AUTHORITIES
      value: '/hawkular-metrics-certs/tls.truststore.crt'
      required: false
    objects:

    - apiVersion: v1
      kind: Service
      metadata:
        name: hawkular-metrics
        labels:
          metrics-infra: hawkular-metrics
          name: hawkular-metrics
        annotations:
          "service.alpha.openshift.io/serving-cert-secret-name": hawkular-metrics-certs
      spec:
        selector:
          name: hawkular-metrics
        ports:
        - name: https-endpoint
          port: 443
          targetPort: https-endpoint
    - apiVersion: v1
      kind: ReplicationController
      metadata:
        name: hawkular-metrics
        labels:
          metrics-infra: hawkular-metrics
          name: hawkular-metrics
      spec:
        selector:
          name: hawkular-metrics
        replicas: 1
        template:
          version: v1
          metadata:
            labels:
              metrics-infra: hawkular-metrics
              name: hawkular-metrics
          spec:
            serviceAccount: hawkular
            containers:
            - image: "${IMAGE_PREFIX}metrics-hawkular-metrics:${IMAGE_VERSION}"
              name: hawkular-metrics
              ports:
              - name: http-endpoint
                containerPort: 8080
              - name: https-endpoint
                containerPort: 8443
              - name: ping
                containerPort: 8888
              command:
              - "/opt/hawkular/scripts/hawkular-metrics-wrapper.sh"
              - "-b"
              - 0.0.0.0
              - "-Dhawkular.metrics.cassandra.nodes=hawkular-cassandra"
              - "-Dhawkular.metrics.cassandra.use-ssl"
              - "-Dhawkular.metrics.openshift.auth-methods=openshift-oauth,htpasswd"
              - "-Dhawkular.metrics.openshift.htpasswd-file=/client-secrets/hawkular-metrics.htpasswd.file"
              - "-Dhawkular.metrics.allowed-cors-access-control-allow-headers=authorization"
              - "-Dhawkular.metrics.default-ttl=${METRIC_DURATION}"
              - "-Dhawkular.metrics.admin-tenant=_hawkular_admin"
              - "-Dhawkular-alerts.cassandra-nodes=hawkular-cassandra"
              - "-Dhawkular-alerts.cassandra-use-ssl"
              - "-Dhawkular.alerts.openshift.auth-methods=openshift-oauth,htpasswd"
              - "-Dhawkular.alerts.openshift.htpasswd-file=/client-secrets/hawkular-metrics.htpasswd.file"
              - "-Dhawkular.alerts.allowed-cors-access-control-allow-headers=authorization"
              - "-Dhawkular-alerts.elasticsearch-url=${LOGGING_URL}"
              - "-Dhawkular-alerts.elasticsearch-proxy-remote-user=hawkular"
              - "-Dhawkular-alerts.elasticsearch-forwarded-for=127.0.0.1"
              - "-Dcom.datastax.driver.FORCE_NIO=true"
              - "-Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true"
              - "-Dorg.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH=true"
              - "-DKUBERNETES_MASTER_URL=${MASTER_URL}"
              - "-DUSER_WRITE_ACCESS=${USER_WRITE_ACCESS}"
              - "--hmw.truststore_authorities=${TRUSTSTORE_AUTHORITIES}"
              env:
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: MASTER_URL
                value: ${MASTER_URL}
              - name: OPENSHIFT_KUBE_PING_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: OPENSHIFT_KUBE_PING_LABELS
                value: "metrics-infra=hawkular-metrics,name=hawkular-metrics"
              - name: STARTUP_TIMEOUT
                value: ${STARTUP_TIMEOUT}
              - name: JGROUPS_PASSWORD
                value: ${JGROUPS_PASSWORD}
              volumeMounts:
              - name: hawkular-metrics-certs
                mountPath: "/hawkular-metrics-certs"
              - name: hawkular-metrics-client-secrets
                mountPath: "/client-secrets"
              readinessProbe:
                exec:
                  command:
                  - "/opt/hawkular/scripts/hawkular-metrics-readiness.py"
              livenessProbe:
                exec:
                  command:
                  - "/opt/hawkular/scripts/hawkular-metrics-liveness.py"
            volumes:
            - name: hawkular-metrics-certs
              secret:
                secretName: hawkular-metrics-certs
            - name: hawkular-metrics-client-secrets
              secret:
                secretName: hawkular-metrics-account
  hawkular.sh: |-
    #!/bin/bash
    #
    # Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
    # and other contributors as indicated by the @author tags.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #

    function deploy_hawkular() {
      setup_certificate "hawkular-metrics" "hawkular-metrics,hawkular-metrics.${PROJECT}.svc.cluster.local,${hawkular_metrics_hostname}" "${HAWKULAR_METRICS_PEM:-}"
      setup_certificate "hawkular-cassandra" "hawkular-cassandra" "${HAWKULAR_CASSANDRA_PEM:-}"

      metrics_tls_crt=$(base64 -w 0 ${dir}/hawkular-metrics.crt)
      metrics_tls_key=$(base64 -w 0 ${dir}/hawkular-metrics.key)
      cassandra_tls_crt=$(base64 -w 0 ${dir}/hawkular-cassandra.crt)
      cassandra_tls_key=$(base64 -w 0 ${dir}/hawkular-cassandra.key)

      # note that each of the following files contain the cert itself + the cert for the signer
      metrics_tls_truststore=$(base64 -w 0 ${dir}/hawkular-cassandra.crt)
      cassandra_tls_peer_truststore=$(base64 -w 0 ${dir}/hawkular-cassandra.crt)
      cassandra_tls_client_truststore=$(base64 -w 0 ${dir}/hawkular-metrics.crt)

      cat > ${dir}/hawkular-cassandra-certs.yaml <<EOF
    apiVersion: v1
    data:
      tls.crt: ${cassandra_tls_crt}
      tls.key: ${cassandra_tls_key}
      tls.peer.truststore.crt: ${cassandra_tls_peer_truststore}
      tls.client.truststore.crt: ${cassandra_tls_client_truststore}
    kind: Secret
    metadata:
      labels:
        metrics-infra: hawkular-cassandra-certs
      annotations:
        service.alpha.openshift.io/originating-service-name: hawkular-cassandra
      name: hawkular-cassandra-certs
    type: kubernetes.io/tls
    EOF

      cat > ${dir}/hawkular-metrics-certs.yaml <<EOF
    apiVersion: v1
    data:
      tls.crt: ${metrics_tls_crt}
      tls.key: ${metrics_tls_key}
      tls.truststore.crt: ${metrics_tls_truststore}
    kind: Secret
    metadata:
      labels:
        metrics-infra: hawkular-metrics-certs
      annotations:
        service.alpha.openshift.io/originating-service-name: hawkular-metrics
      name: hawkular-metrics-certs
    type: kubernetes.io/tls
    EOF

      echo "Creating the secret with the required certs if it doesn't exist yet"
      oc get secret hawkular-metrics-certs > /dev/null || oc create -f ${dir}/hawkular-metrics-certs.yaml
      oc get secret hawkular-cassandra-certs > /dev/null || oc create -f ${dir}/hawkular-cassandra-certs.yaml

      hawkular_metrics_password=`openssl rand -base64 512 | tr -dc A-Z-a-z-0-9 | head -c 17`
      htpasswd -cb $dir/hawkular-metrics.htpasswd hawkular $hawkular_metrics_password

      echo
      echo "Creating the Hawkular Metrics User Account Secrets"
      cat > $dir/hawkular-metrics-account.json <<EOF
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata":
            { "name": "hawkular-metrics-account",
              "labels": {
                "metrics-infra": "hawkular-metrics"
              }
            },
            "data":
            {
              "hawkular-metrics.username": "$(base64 <<< `echo hawkular`)",
              "hawkular-metrics.password": "$(base64 <<< `echo $hawkular_metrics_password`)",
              "hawkular-metrics.htpasswd.file": "$(base64 -w 0 $dir/hawkular-metrics.htpasswd)"
            }
          }
    EOF

      echo "Creating Hawkular Metrics"
      oc create -f $dir/hawkular-metrics-account.json

      echo "Creating Hawkular Metrics & Cassandra Templates"
      oc create -f templates/hawkular-metrics.yaml
      oc create -f templates/hawkular-cassandra.yaml
      oc create -f templates/hawkular-cassandra-node-pv.yaml
      oc create -f templates/hawkular-cassandra-node-dynamic-pv.yaml
      oc create -f templates/hawkular-cassandra-node-emptydir.yaml
      oc create -f templates/support.yaml

      echo "Deploying Hawkular Metrics & Cassandra Components"
      oc process hawkular-metrics IMAGE_PREFIX=$image_prefix IMAGE_VERSION=$image_version METRIC_DURATION=$metric_duration MASTER_URL=$master_url USER_WRITE_ACCESS=$user_write_access STARTUP_TIMEOUT=$startup_timeout | oc create -f -
      oc process hawkular-cassandra-services | oc create -f -
      oc process hawkular-support | oc create -f -

      # this may return an error code if the route already exists, this is to be expected with a refresh and is why we have the || true here
      ## once BZ 1401081 is done, the Route specified on `hawkular-metrics.yaml` should work and this command here should be removed.
      oc create route reencrypt --service hawkular-metrics --dest-ca-cert=${dir}/hawkular-metrics-ca.cert || true

      if [ "${use_persistent_storage}" = true ]; then
        if [ "${dynamically_provision_storage}" = true ]; then
          echo "Setting up Cassandra with Dynamically Provisioned Storage"
          # Deploy the main 'master' Cassandra node
          # Note that this may return an error code if the pvc already exists, thisis to be expected and why we have the || true here
          oc process hawkular-cassandra-node-dynamic-pv \
            IMAGE_PREFIX=$image_prefix \
            IMAGE_VERSION=$image_version \
            NODE=1 \
            PV_SIZE=$cassandra_pv_size \
            MASTER=true | oc create -f - || true
          # Deploy any subsequent Cassandra nodes
          for i in $(seq 2 $cassandra_nodes);
          do
            # Note that this may return an error code if the pvc already exists, this is to be expected and why we have the || true here
            oc process hawkular-cassandra-node-dynamic-pv \
              IMAGE_PREFIX=$image_prefix \
              IMAGE_VERSION=$image_version \
              PV_SIZE=$cassandra_pv_size NODE=$i | oc create -f - || true
          done
        else
          echo "Setting up Cassandra with Persistent Storage"
          # Deploy the main 'master' Cassandra node
          # Note that this may return an error code if the pvc already exists, thisis to be expected and why we have the || true here
          oc process hawkular-cassandra-node-pv \
            IMAGE_PREFIX=$image_prefix \
            IMAGE_VERSION=$image_version \
            NODE=1 \
            PV_SIZE=$cassandra_pv_size \
            MASTER=true | oc create -f - || true
          # Deploy any subsequent Cassandra nodes
          for i in $(seq 2 $cassandra_nodes);
          do
            # Note that this may return an error code if the pvc already exists, this is to be expected and why we have the || true here
            oc process hawkular-cassandra-node-pv \
              IMAGE_PREFIX=$image_prefix \
              IMAGE_VERSION=$image_version \
              PV_SIZE=$cassandra_pv_size \
              NODE=$i | oc create -f - || true
          done
        fi
      else
        echo "Setting up Cassandra with Non Persistent Storage"
        oc process hawkular-cassandra-node-emptydir \
          IMAGE_PREFIX=$image_prefix \
          IMAGE_VERSION=$image_version \
          NODE=1 \
          MASTER=true | oc create -f -
        for i in $(seq 2 $cassandra_nodes);
        do
          oc process hawkular-cassandra-node-emptydir \
            IMAGE_PREFIX=$image_prefix \
            IMAGE_VERSION=$image_version \
            NODE=$i | oc create -f -
        done
      fi
    }
  heapster.sh: |-
    #!/bin/bash
    #
    # Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
    # and other contributors as indicated by the @author tags.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #

    function deploy_heapster() {
      # Get the Heapster allowed users
      if [ -n "${HEAPSTER_ALLOWED_USERS:-}" ]; then
        echo "${HEAPSTER_ALLOWED_USERS:-}" | base64 -d > $dir/heapster_allowed_users
      elif [ -s ${secret_dir}/heapster-allowed-users ]; then
        cp ${secret_dir}/heapster-allowed-users $dir/heapster_allowed_users
      else #by default accept access from the api proxy
        echo "system:master-proxy" > $dir/heapster_allowed_users
      fi

      echo
      echo "Creating the Heapster Secrets configuration json file"
      heapster_tls_truststore=$(base64 -w 0 ${dir}/hawkular-metrics-ca.cert)
      cat > $dir/heapster-secrets.json <<EOF
          {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata":
            { "name": "heapster-secrets",
              "labels": {
                "metrics-infra": "heapster"
              }
            },
            "data":
            {
              "heapster.allowed-users":"$(base64 -w 0 $dir/heapster_allowed_users)",
              "heapster.tls.truststore":"${heapster_tls_truststore}"
            }
          }
    EOF

      echo "Installing the Heapster Component."

      echo "Creating the Heapster secret"
      oc create -f $dir/heapster-secrets.json

      echo "Creating the Heapster template"
      if [ -n "${HEAPSTER_STANDALONE:-}" ]; then
        oc create -f templates/heapster-standalone.yaml
      else
        oc create -f templates/heapster.yaml
      fi

      echo "Deploying the Heapster component"
      if [ -n "${HEAPSTER_STANDALONE:-}" ]; then
        oc process heapster-standalone IMAGE_PREFIX=$image_prefix IMAGE_VERSION=$image_version MASTER_URL=$master_url METRIC_RESOLUTION=$metric_resolution STARTUP_TIMEOUT=$startup_timeout | oc create -f -
      else
        oc process hawkular-heapster IMAGE_PREFIX=$image_prefix IMAGE_VERSION=$image_version MASTER_URL=$master_url NODE_ID=$heapster_node_id METRIC_RESOLUTION=$metric_resolution STARTUP_TIMEOUT=$startup_timeout | oc create -f -
      fi
    }
  heapster.yaml: >-
    id: hawkular-heapster

    kind: Template

    apiVersion: v1

    name: Hawkular Heapster Template

    description: Configures a Heapster template to be used with Hawkular
    Metrics.

    metadata:
      name: hawkular-heapster
      labels:
        metrics-infra: heapster
    parameters:

    - description: Internal URL for the master, for authentication retrieval
      name: MASTER_URL
      value: https://kubernetes.default.svc:443
    - description: Specify prefix for metrics components; e.g. for
    "openshift/origin-metrics-deployer:v1.1",
        set prefix "openshift/origin-"
      name: IMAGE_PREFIX
      value: openshift/origin-
    - description: Specify version for metrics components; e.g. for
    "openshift/origin-metrics-deployer:v1.1",
        set version "v1.1"
      name: IMAGE_VERSION
      value: "v3.9"
    - description: The identifier used when calcuating node level metric ids
      name: NODE_ID
      value: nodename
    - description: "How often metrics should be gathered. Defaults value of
    '30s' for 30 seconds"
      name: METRIC_RESOLUTION
      value: "30s"
    - description: How long in seconds we should wait until Heapster starts up
    before attempting a restart
      name: STARTUP_TIMEOUT
      value: "500"
    objects:

    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: heapster
        labels:
          metrics-infra: support
      secrets:
      - name: heapster-secrets
      - name: hawkular-metrics-account
    - apiVersion: v1
      kind: Service
      metadata:
        name: heapster
        labels:
          metrics-infra: heapster
          name: heapster
        annotations:
          "service.alpha.openshift.io/serving-cert-secret-name": heapster-certs
      spec:
        selector:
          name: heapster
        ports:
        - port: 80
          targetPort: http-endpoint
    - apiVersion: v1
      kind: ReplicationController
      metadata:
        name: heapster
        labels:
          metrics-infra: heapster
          name: heapster
      spec:
        selector:
          name: heapster
        replicas: 1
        template:
          version: v1
          metadata:
            labels:
              metrics-infra: heapster
              name: heapster
          spec:
            containers:
            - image: "${IMAGE_PREFIX}metrics-heapster:${IMAGE_VERSION}"
              name: heapster
              ports:
              - name: http-endpoint
                containerPort: 8082
              command:
              - "heapster-wrapper.sh"
              - "--wrapper.username_file=/hawkular-account/hawkular-metrics.username"
              - "--wrapper.password_file=/hawkular-account/hawkular-metrics.password"
              - "--wrapper.allowed_users_file=/secrets/heapster.allowed-users"
              - "--wrapper.endpoint_check=https://hawkular-metrics:443/hawkular/metrics/status"
              - "--source=kubernetes.summary_api:${MASTER_URL}?useServiceAccount=true&kubeletHttps=true&kubeletPort=10250&insecure=true"
              - "--sink=hawkular:https://hawkular-metrics:443?tenant=_system&labelToTenant=namespace_name&labelNodeId=${NODE_ID}&caCert=/secrets/heapster.tls.truststore&user=%username%&pass=%password%&filter=label(container_name:^system.slice.*|^user.slice)"
              - "--tls_cert=/heapster-certs/tls.crt"
              - "--tls_key=/heapster-certs/tls.key"
              - "--tls_client_ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
              - "--allowed_users=%allowed_users%"
              - "--metric_resolution=${METRIC_RESOLUTION}"
              env:
              - name: STARTUP_TIMEOUT
                value: ${STARTUP_TIMEOUT}
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              volumeMounts:
              - name: heapster-secrets
                mountPath: "/secrets"
              - name: hawkular-metrics-account
                mountPath: "/hawkular-account"
              - name: heapster-certs
                mountPath: "/heapster-certs"
              readinessProbe:
                exec:
                  command:
                  - "/opt/heapster-readiness.sh"
            volumes:
            - name: heapster-secrets
              secret:
                secretName: heapster-secrets
            - name: heapster-certs
              secret:
                secretName: heapster-certs
            - name: hawkular-metrics-account
              secret:
                secretName: hawkular-metrics-account
            serviceAccount: heapster
  run.sh: >-
    #!/bin/bash

    #

    # Copyright 2014-2015 Red Hat, Inc. and/or its affiliates

    # and other contributors as indicated by the @author tags.

    #

    # Licensed under the Apache License, Version 2.0 (the "License");

    # you may not use this file except in compliance with the License.

    # You may obtain a copy of the License at

    #

    #    http://www.apache.org/licenses/LICENSE-2.0

    #

    # Unless required by applicable law or agreed to in writing, software

    # distributed under the License is distributed on an "AS IS" BASIS,

    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

    # See the License for the specific language governing permissions and

    # limitations under the License.

    #


    for script in scripts/*.sh; do source $script; done


    set -x


    continue_on_error=$(parse_bool "${CONTINUE_ON_ERROR:-false}"
    CONTINUE_ON_ERROR)

    if [ "$continue_on_error" == false ]; then
     set -eu
    fi


    #

    # determine a bunch of variables from env or defaults

    #


    # what purpose this invocation should perform:

    # preflight, deploy, validate, upgrade, remove, debug

    deployer_mode=${MODE:-deploy}


    # The version of everything to deploy

    image_prefix=${IMAGE_PREFIX:-openshift/origin-}

    image_version=${IMAGE_VERSION:-v3.9}


    # The startup timeout for Hawkular Metrics and Heapster

    startup_timeout=${STARTUP_TIMEOUT:-500}


    master_url=${MASTER_URL:-https://kubernetes.default.svc:8443}

    # If the master url ends in a '/' then remove it.

    if [[ "${master_url: -1}" == "/" ]]; then
      master_url=${master_url: : -1}
    fi


    # Set to true to undeploy everything before deploying

    redeploy=$(parse_bool "${REDEPLOY:-false}" REDEPLOY)

    if [ "$redeploy" == true ]; then
      mode=redeploy
    else
      mode=${MODE:-deploy}
      [ "$mode" = redeploy ] && redeploy=true
    fi


    ignore_preflight=$(parse_bool "${IGNORE_PREFLIGHT:-false}" IGNORE_PREFLIGHT)


    # The number of initial Cassandra Nodes to Deploy

    cassandra_nodes=${CASSANDRA_NODES:-1}

    # If we should use persistent storage or not

    use_persistent_storage=$(parse_bool \
        "${USE_PERSISTENT_STORAGE:-true}" USE_PERSISTENT_STORAGE)
    # If we should dynamically provision storage

    dynamically_provision_storage=$(parse_bool \
        "${DYNAMICALLY_PROVISION_STORAGE:-false}" DYNAMICALLY_PROVISION_STORAGE)
    # The size of each Cassandra Node

    cassandra_pv_size=${CASSANDRA_PV_SIZE:-10Gi}


    # How long metrics should be stored in days

    metric_duration=${METRIC_DURATION:-7}

    # If user accounts should be able to write metrics

    user_write_access=${USER_WRITE_ACCESS:-false}


    #

    heapster_node_id=${HEAPSTER_NODE_ID:-nodename}


    #

    metric_resolution=${METRIC_RESOLUTION:-30s}


    # The project we are deployed in

    project=${PROJECT:-openshift-infra}


    # the master certificate and service account tokens

    master_ca=${MASTER_CA:-/var/run/secrets/kubernetes.io/serviceaccount/ca.crt}

    token_file=${TOKEN_FILE:-/var/run/secrets/kubernetes.io/serviceaccount/token}


    # directory to perform all the processing

    dir=${PROCESSING_DIR:-_output} #directory used to write files which
    generating certificates

    # location of deployer secret mount

    secret_dir=${SECRET_DIR:-_secret}

    # ensure directories exist in local use case

    rm -rf $dir && mkdir -p $dir && chmod 700 $dir || :

    mkdir -p $secret_dir && chmod 700 $secret_dir || :


    hawkular_metrics_hostname=${HAWKULAR_METRICS_HOSTNAME:-hawkular-metrics.example.com}


    oc adm ca create-signer-cert  \
      --key="${dir}/ca.key" \
      --cert="${dir}/ca.crt" \
      --serial="${dir}/ca.serial.txt" \
      --name="metrics-signer@$(date +%s)"

    # set up configuration for client

    if [ -n "${WRITE_KUBECONFIG:-}" ]; then
        # craft a kubeconfig, usually at $KUBECONFIG location
        oc config set-cluster master \
          --certificate-authority="${master_ca}" \
          --server="${master_url}"
        oc config set-credentials account \
          --token="$(cat ${token_file})"
        oc config set-context current \
          --cluster=master \
          --user=account \
          --namespace="${PROJECT}"
        oc config use-context current
    fi


    # set up client config file; user can opt to use their own instead

    old_kc="$KUBECONFIG"

    KUBECONFIG="$dir/kube.conf"

    [ -z "${WRITE_KUBECONFIG:-}" ] && cp "$old_kc" $dir/kube.conf

    oc config set-cluster deployer-master \
      --certificate-authority="${master_ca}" \
      --server="${master_url}"
    oc config set-credentials deployer-account \
      --token="$(cat ${token_file})"
    oc config set-context deployer-context \
      --cluster=deployer-master \
      --user=deployer-account \
      --namespace="${project}"
    [ -n "${WRITE_KUBECONFIG:-}" ] && oc config use-context deployer-context


    case $deployer_mode in

    preflight)
        validate_preflight
        ;;
    deploy|redeploy|refresh)
        if [ "$ignore_preflight" != true ]; then
            validate_preflight
        fi
        handle_previous_deployment
        [ -z "${HEAPSTER_STANDALONE:-}" ] && deploy_hawkular
        deploy_heapster
        validate_deployment
        ;;
    validate)
        validate_deployment
        ;;
    upgrade)
        ;;
    remove)
        handle_previous_deployment
        ;;
    debug)
        echo "sleeping forever; shell in and debug at will."
        while true; do sleep 10; done
        ;;
    *)
        echo "Invalid mode: ${deployer_mode}"
        exit 255
        ;;
    esac


    #If the deployer mode is remove and we have not run into any errors, then
    remove the deployer pod as well

    if [[ $deployer_mode == "remove" ]]; then
      oc delete pod --selector=metrics-infra
    fi


    echo 'Success!'
